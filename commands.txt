python check_models.py   --- to check gemini models


            $env:GOOGLE_APPLICATION_CREDENTIALS="C:\path\to\your\keyfile.json"
                $env:GOOGLE_APPLICATION_CREDENTIALS


STEP 1:
now let's do this step by step, let's setup gcp first and then next step and so on. 

Okay, let's start with Step 1: Google Cloud Platform (GCP) Setup.
You will need to perform these actions in the Google Cloud Console 1.
Select or Create a GCP Project:
Go to the GCP Console.
In the top bar, click the project selector dropdown (it might say "Select a project" or show your current project name).
Either select an existing project you want to use or click "NEW PROJECT".
If creating a new project, give it a descriptive name (e.g., "Vocabulary Voice Bot") and click "CREATE". Make sure the new project is selected after creation.
Enable Billing:
Navigate to the "Billing" section using the left-hand navigation menu (you might need to click the hamburger menu icon â˜° first).
If the selected project doesn't have a billing account linked, you'll be prompted to link one or create a new one. Follow the instructions.
Why? Google Cloud STT and TTS are paid services (though they have generous free tiers). Billing must be enabled for the project to use these APIs, even if you stay within the free tier initially.
Enable Required APIs:
Use the search bar at the top of the console or the navigation menu to go to "APIs & Services" -> "Library".
Search for "Cloud Speech-to-Text API". Select it and click "ENABLE".
Search for "Cloud Text-to-Speech API". Select it and click "ENABLE".
Why? This explicitly grants your project permission to use these specific AI services.
Create a Service Account:
Navigate to "IAM & Admin" -> "Service Accounts" (using the navigation menu).
Click "+ CREATE SERVICE ACCOUNT" near the top.
Give the service account a name (e.g., vocab-bot-service-account) and an optional description. The Service account ID will be generated automatically. Click "CREATE AND CONTINUE".
Grant Roles (Optional but Recommended for Simplicity Initially): For simplicity during development, you can grant the "Basic" -> "Editor" role to this service account for the project. For production, you should grant more specific, least-privilege roles like "Cloud Speech Service Agent" and "Cloud Text-to-Speech Service Agent". Click "CONTINUE".
Skip the "Grant users access to this service account" step for now and click "DONE".
Why? The service account acts as an identity for your Flask application, allowing it to authenticate securely with Google Cloud APIs without using your personal user credentials.
Download Service Account Key:
Find the service account you just created in the list under "IAM & Admin" -> "Service Accounts".
Click on the email address of the service account.
Go to the "KEYS" tab.
Click "ADD KEY" -> "Create new key".
Select JSON as the key type and click "CREATE".
A JSON key file will be downloaded to your computer. Treat this file like a password! Store it in a secure location on your development machine. Do not add it to your Git repository or share it publicly. Note the full path to where you saved this file.
Set Environment Variable:
You need to tell the Google Cloud client libraries where to find the key file you just downloaded. The standard way is to set the GOOGLE_APPLICATION_CREDENTIALS environment variable.
How to set it depends on your operating system:
Windows (PowerShell - for the current session):
Apply to commands.txt
Run
(Replace C:\path\to\your\keyfile.json with the actual path to your downloaded key). To set it permanently, search for "Environment Variables" in Windows settings.
